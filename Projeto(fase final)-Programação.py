class Usuario:    # Classe que representa um usu√°rio do sistema
    def __init__(self, usuario_id, nome, funcao, senha):
        self.usuario_id = usuario_id   #  N√∫mero identificador √∫nico do usu√°rio
        self.nome = nome    # Nome completo do usu√°rio
        self.funcao = funcao   # Cargou ou fun√ß√£o exercida na empresa/obra
        self.senha = senha    # Senha de acesso para login no sistema

    def __str__(self):
        return f"{self.nome} ({self.funcao})"   # Representa√ß√£o em string para mostrar o nome e fun√ß√£o do usu√°rio logado
    
class Equipamento:   # Classe que representa um equipamento
    def __init__(self, id, nome, categoria, status):
        self.id = id    # Identificador √∫nico do equipamento
        self.nome = nome    # Nome do equipamento
        self.categoria = categoria   # Categoria (Equipamento: Ferramenta, Maquin√°rio, Dispositivo etc.)
        self.status = status    # Status atual (Dispon√≠vel, Em uso, Em manuten√ß√£o etc.) 
        self.historico = []   # Lista para armazenar as a√ß√µes feitas com o equipamento

    def adicionar_historico(self, acao, usuario):   # M√©todo para registrar a√ß√µes realizadas no hist√≥rico do equipamento
        self.historico.append(f"{acao} por {usuario.nome} ({usuario.funcao})")   # Adiciona a a√ß√£o com nome e fun√ß√£o do usu√°rio respons√°vel

    def __str__(self):   # Retorna uma descri√ß√£o breve do equipamento (em string)
        return f"[{self.id}] {self.nome} - {self.categoria} ({self.status})"

class SistemaControle:   # Classe principal que gerencia o sistema de controle (equipamentos e usu√°rios cadastrados)
    def __init__(self):
        self.equipamentos = []   # Lista com todos os equipamentos cadastrados
        self.usuarios = {}    # Lista de usu√°rios cadastrados (chave: ID)
        self.usuario_logado = None   # Refer√™ncia ao usu√°rio atualmente logado

    def cadastrar_usuario(self):   # Fun√ß√£o para cadastrar um novo usu√°rio no sistema
        print("\n--- Cadastro de Usu√°rio ---")
        usuario_id = input("ID do usu√°rio: ")
        if usuario_id in self.usuarios:
            print("‚ùå ID j√° cadastrado.")
            return
        nome = input("Nome completo: ")
        funcao = input("Fun√ß√£o/Cargo: ")
        senha = input("Senha: ")
        self.usuarios[usuario_id] = Usuario(usuario_id, nome, funcao, senha)   # Adiciona o usu√°rio √† lista
        print("‚úÖ Usu√°rio cadastrado com sucesso!")

    def login(self):   # Fun√ß√£o para realizar login com ID e senha
        print("\nüîê Login do Usu√°rio")
        usuario_id = input("ID do usu√°rio: ")
        senha = input("Senha: ")
        usuario = self.usuarios.get(usuario_id)
        if usuario and usuario.senha == senha:
            self.usuario_logado = usuario
            print(f"‚úÖ Bem-vindo, {usuario.nome}!")
        else:
            print("‚ùå ID ou senha incorretos.")

    def logout(self):   # Fun√ß√£o para sair da conta logada
        if self.usuario_logado:
            print(f"üëã {self.usuario_logado.nome} saiu do sistema.")
            self.usuario_logado = None
        else:
            print("‚ö†Ô∏è Nenhum usu√°rio logado.")

    def cadastrar_equipamento(self):   # Fun√ß√£o para cadastrar novo equipamento
        print("\n--- Cadastro de Equipamento ---")
        id = input("ID do equipamento: ")
        nome = input("Nome: ")
        categoria = input("Categoria (Equipamento: Ferramenta, Maquin√°rio, Dispositivo etc.): ")
        status = input("Status (Dispon√≠vel / Em uso / Em manuten√ß√£o etc): ")

        equipamento = Equipamento(id, nome, categoria, status)
        equipamento.adicionar_historico("Cadastrado", self.usuario_logado)
        self.equipamentos.append(equipamento)
        print("‚úÖ Equipamento cadastrado com sucesso!")

    def listar_equipamentos(self):   # Fun√ß√£o para exibir todos os equipamentos cadastrados
        print("\n--- Lista de Equipamentos ---")
        if not self.equipamentos:
            print("Nenhum equipamento cadastrado.")
        for eq in self.equipamentos:
            print(eq)

    def buscar_por_id(self):   # Fun√ß√£o para buscar um equipamento pelo seu ID
        print("\n--- Buscar por ID ---")
        id = input("Digite o ID do equipamento: ")
        for eq in self.equipamentos:
            if eq.id == id:
                print(eq)
                return
        print("‚ùå Equipamento n√£o encontrado.")

    def buscar_por_categoria(self):   # Fun√ß√£o para buscar equipamentos por categoria
        print("\n--- Buscar por Categoria ---")
        categoria = input("Digite a categoria: ")
        encontrados = [eq for eq in self.equipamentos if eq.categoria.lower() == categoria.lower()]
        if encontrados:
            for eq in encontrados:
                print(eq)
        else:
            print("‚ùå Nenhum equipamento encontrado na categoria.")

    def buscar_por_status(self):   # Fun√ß√£o para buscar equipamentos por status
        print("\n--- Buscar por Status ---")
        status = input("Digite o status: ")
        encontrados = [eq for eq in self.equipamentos if eq.status.lower() == status.lower()]
        if encontrados:
            for eq in encontrados:
                print(eq)
        else:
            print("‚ùå Nenhum equipamento com esse status.")

    def atualizar_status(self):    # Atualiza o status de um equipamento (ex: de "Em uso" para "Dispon√≠vel")
        print("\n--- Atualizar Status ---")
        id = input("ID do equipamento: ")
        for eq in self.equipamentos:
            if eq.id == id:
                novo_status = input("Novo status: ")
                eq.status = novo_status
                eq.adicionar_historico("Status atualizado", self.usuario_logado)
                print("‚úÖ Status atualizado com sucesso!")
                return
        print("‚ùå Equipamento n√£o encontrado.")

    def remover_equipamento(self):   # Remove um equipamento do sistema
        print("\n--- Remover Equipamento ---")
        id = input("ID do equipamento: ")
        for eq in self.equipamentos:
            if eq.id == id:
                self.equipamentos.remove(eq)
                print("‚úÖ Equipamento removido.")
                return
        print("‚ùå Equipamento n√£o encontrado.")

    def relatorio_geral(self):   # Gera um relat√≥rio geral com o total de equipamentos por categoria
        print("\nüìä --- Relat√≥rio Geral ---")
        print(f"Total de equipamentos: {len(self.equipamentos)}")
        categorias = {}
        for eq in self.equipamentos:
            categorias[eq.categoria] = categorias.get(eq.categoria, 0) + 1
        for cat, count in categorias.items():
            print(f"- {cat}: {count} equipamentos")

    def historico_equipamento(self):    # Exibe o hist√≥rico de a√ß√µes realizadas em um equipamento espec√≠fico
        print("\nüìö --- Hist√≥rico de Uso ---")
        id = input("Digite o ID do equipamento: ")
        for eq in self.equipamentos:
            if eq.id == id:
                print(f"Hist√≥rico do equipamento {eq.nome}:")
                for entrada in eq.historico:
                    print(f" - {entrada}")
                return
        print("‚ùå Equipamento n√£o encontrado.")

    def menu(self):   # Menu principal do sistema com autentica√ß√£o de usu√°rio
        while True:
            if not self.usuario_logado:   # Menu para usu√°rios n√£o autenticados
                print("\n=== MENU PRINCIPAL ===")
                print("1. Login")
                print("2. Cadastrar novo usu√°rio")
                print("3. Sair")
                escolha = input("Escolha uma op√ß√£o: ")

                if escolha == "1":
                    self.login()
                elif escolha == "2":
                    self.cadastrar_usuario()
                elif escolha == "3":
                    print("Sistema encerrado.")
                    break
                else:
                    print("‚ùå Op√ß√£o inv√°lida.")
            else:     
                # Menu completo para usu√°rio autenticado
                print(f"\nüîß Menu do sistema - Logado como: {self.usuario_logado.nome} ({self.usuario_logado.funcao})")
                print("1. Cadastrar equipamento")
                print("2. Listar equipamentos")
                print("3. Buscar por ID")
                print("4. Buscar por categoria")
                print("5. Buscar por status")
                print("6. Atualizar status")
                print("7. Remover equipamento")
                print("8. Relat√≥rio geral")
                print("9. Hist√≥rico de uso")
                print("10. Logout")
                opcao = input("Escolha uma op√ß√£o: ")

                if opcao == "1":
                    self.cadastrar_equipamento()
                elif opcao == "2":
                    self.listar_equipamentos()
                elif opcao == "3":
                    self.buscar_por_id()
                elif opcao == "4":
                    self.buscar_por_categoria()
                elif opcao == "5":
                    self.buscar_por_status()
                elif opcao == "6":
                    self.atualizar_status()
                elif opcao == "7":
                    self.remover_equipamento()
                elif opcao == "8":
                    self.relatorio_geral()
                elif opcao == "9":
                    self.historico_equipamento()
                elif opcao == "10":
                    self.logout()
                else:
                    print("‚ùå Op√ß√£o inv√°lida.")


if __name__ == "__main__":  # Execu√ß√£o principal do sistema
    sistema = SistemaControle()   # Cria uma inst√¢ncia do sistema
    sistema.menu()   # Inicia o menu principal